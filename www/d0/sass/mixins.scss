@mixin box-sizing($params) {
    -webkit-box-sizing: $params;
    -moz-box-sizing: $params;
    -o-box-sizing: $params;
    box-sizing: $params;
}

@mixin border-radius($params) {
    -webkit-border-radius: $params;
    -moz-border-radius: $params;
    -o-border-radius: $params;
    border-radius: $params;
}

@mixin box-shadow($params) {
    -webkit-box-shadow: $params;
    -moz-box-shadow: $params;
    -o-box-shadow: $params;
    box-shadow: $params;
}

@mixin inline-block() {
    display: inline-block;
    *display: inline;
    zoom: 1;
}

@mixin table-cell() {
    display: table-cell;
    *float: left;
}

@mixin hidden-overflow() {
    overflow: hidden;
}

@mixin transform($params) {
    -webkit-transform: $params;
    -moz-transform: $params;
    -ms-transform: $params;
    -o-transform: $params;
    transform: $params;
}

@mixin transition($params) {
    -webkit-transition: $params;
    -moz-transition: $params;
    -ms-transition: $params;
    -o-transition: $params;
    transition: $params;
}

@mixin backface-visibility($params) {
    -webkit-backface-visibility: $params;
    -moz-backface-visibility: $params;
    -ms-backface-visibility: $params;
    -o-backface-visibility: $params;
    backface-visibility: $params;
}

@mixin transform-style($params) {
    -webkit-transform-style: $params;
    -moz-transform-style: $params;
    -ms-transform-style: $params;
    -o-transform-style: $params;
    transform-style: $params;
}

@mixin perspective($params) {
    -webkit-perspective: $params;
    -moz-perspective: $params;
    -ms-perspective: $params;
    -o-perspective: $params;
    perspective: $params;
}

@mixin font-size($size: 1, $line: $size * 1.5){
    font-size: ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size: $size + rem;
    line-height: $line + rem;
}


$unit-default-px: 10px; // based on html { font-size: 62.5%; }
@function fix8_unit_to_px($val) {
  @if $val == auto {
    @return $val;
  }
  @else {
    @if unitless($val) {
      @if $val == 0 { @return $val }
      @else { @return $val * $unit-default-px};
    } @else { @return $val};
  }
}

@function fix8_unit_to_rem($val) {
    @if $val == auto {
        @return $val;
    }
    @else {
        @if unitless($val) {
            @if $val == 0 { @return $val }
            @else { @return $val+rem};
        } @else { @return $val};
    }
}

@mixin px-rem($prop, $val...) {
    $n: length($val);
    $i: 1;

    $px-list: ();
    $rem-list: ();

    @while $i <= $n {
        $px-list: append($px-list, fix8_unit_to_px(nth($val, $i)));
        $rem-list: append($rem-list, fix8_unit_to_rem(nth($val, $i)));
        $i: $i + 1;
    }

    #{$prop}: $px-list;
    #{$prop}: $rem-list;
}
